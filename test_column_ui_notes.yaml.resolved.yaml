_metadata:
  generated_at: 2025-10-01T23:06:07.230Z
  source_schema: test_column_ui_notes.yaml
  database: test_db
  genlogic_version: 1.0.0
  note: This describes the ACTUAL database structure after GenLogic processing
  warning: ⚠️  DO NOT implement automations in middleware - they run in the database!
tables:
  user:
    _table_info:
      has_automations: false
      foreign_keys: 0
    columns:
      user_id:
        type: integer
        primary_key: true
        expect_null_on_read: false
        can_write_null: false
        writable: never
        reason: auto_increment_sequence
        insert_behavior: omit
        update_behavior: immutable
        note: Database generates this value
        ui_notes:
          read_only:
            editable: false
            description: This column should not be editable in the UI
            ui_behavior:
              - Display as read-only text or disabled input field
              - Do not allow user modifications
              - Show value but prevent editing
      username:
        type: varchar
        size: 50
        expect_null_on_read: true
        can_write_null: true
        writable: always
        insert_behavior: optional
        update_behavior: allowed
        note: Application controls this value
      password_hash:
        type: varchar
        size: 255
        expect_null_on_read: true
        can_write_null: true
        writable: always
        insert_behavior: optional
        update_behavior: allowed
        note: Application controls this value
        ui_notes:
          hidden:
            visible: false
            description: This column should not be visible in the UI
            ui_behavior:
              - Do not display this column in forms or tables
              - Exclude from user-facing displays
              - May be used internally but hidden from users
      email:
        type: varchar
        size: 100
        expect_null_on_read: true
        can_write_null: true
        writable: always
        insert_behavior: optional
        update_behavior: allowed
        note: Application controls this value
      created_at:
        type: timestamp
        expect_null_on_read: true
        can_write_null: true
        writable: always
        insert_behavior: optional
        update_behavior: allowed
        note: Application controls this value
        ui_notes:
          read_only:
            editable: false
            description: This column should not be editable in the UI
            ui_behavior:
              - Display as read-only text or disabled input field
              - Do not allow user modifications
              - Show value but prevent editing
      is_active:
        type: boolean
        expect_null_on_read: true
        can_write_null: true
        writable: always
        insert_behavior: optional
        update_behavior: allowed
        note: Application controls this value
_usage_guide:
  insert_pattern: >-
    To insert data, only include columns where writable=always and
    insert_behavior != omit.

    Example for accounts:
      INSERT INTO accounts (account, category) VALUES ('Checking', 'Asset');

    ❌ WRONG - don't set automated columns:
      INSERT INTO accounts (account, category, debits, balance) VALUES (...);
  update_pattern: >-
    To update data, only modify columns where writable=always and
    update_behavior=allowed.

    Example for accounts:
      UPDATE accounts SET category = 'Liability' WHERE id = 5;

    ❌ WRONG - don't update automated columns:
      UPDATE accounts SET balance = 1000 WHERE id = 5;  -- Will be overwritten!
  query_pattern: >-
    All columns are readable. Automated columns are always current - no need to
    recalculate.

    Example:
      SELECT account, category, balance FROM accounts WHERE category = 'Asset';

    The balance is ALWAYS up-to-date due to database triggers.
  automation_philosophy: |-
    GenLogic implements "Augmented Normalization":
    - Write normalized data (accounts, ledger entries)
    - Read denormalized data (balances pre-calculated)
    - Middleware NEVER calculates aggregations or balances
    - Database maintains ALL computed values via triggers
    - Zero middleware business logic = zero bugs
